serverless-framework-version: "0.3"

info:
  title: My Application
  description: Description in Markdown.
  version: 1.0.0
  team: myteam


services:
  rest-api:
    type: AWS::ApiGateway::RestApi
    name: "demo-rest-api"
    swagger-path: ./definitions/swagger.yaml
    throttling:
      rate-limit: 100
      burst-limit: 200
    vpc-endpoint-ids:
      - ${AWS_LAMBDA_VPC_ID}
  http-api:
    type: AWS::ApiGateway::HttpApi
    name: "demo-http-api"
    swagger-path: ./definitions/swagger.yaml
    throttling:
      rate-limit: 100
      burst-limit: 200
    vpc-endpoint-ids:
      - 1234
      - 5678
  eventbridge:
    type: AWS::EventBridge
    name: "demo-cronjob-01"
  lambda:
    arch: x86_64
    handler: application.services.service3.lambda_handlers.handler
    layers:
      - type: python-requirements
        manifest: ./application/services/service3/requirements.txt
    upload-ignore:
      - tests/*


resources:
  schedule:
    - name: "demo-schedule-001"
      cron: "rate(1 minute)"
      target-type: "lambda"
      target-name: "func-periodic-run"
    - name: "demo-schedule-002"
      cron: "rate(1 minute)"
      target-type: "stepfunc"
      target-name: "my-state-01"
  stepfunc:
    - name: "my-state-01"
      definition-path: ./definitions/state_machine1.json
  lambda:
    - name: "func-get-status"
      handler: application.services.service1.lambda_handlers.status_handler
      runtime: python3.8
      arch: x86_64
      tmp-size: 1024
      layers:
        - type: python-requirements
          manifest: ./application/services/service4/requirements.txt
      upload-ignore:
        - tests/*
    - name: "func-get-user"
      handler: application.services.service2.lambda_handlers.user_handler
    - name: "func-periodic-run"
      handler: application.services.service3.lambda_handlers.handler
    - name: "step-func-1"
      handler: application.services.service4.lambda_handlers.handler
    - name: "step-func-2"
      handler: application.services.service4.lambda_handlers.handler
